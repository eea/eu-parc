<?php

/**
 * @file
 * Contains hooks and custom functions for Parc Core module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\node\Entity\Node;
use Drupal\menu_link_content\MenuLinkContentInterface;
use Drupal\parc_core\ParcCoreViews;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\taxonomy_menu\Plugin\Menu\TaxonomyMenuMenuLink;

/**
 * Implements hook_preprocess_page().
 */
function parc_core_preprocess_page(&$variables) {
  $node = $variables['node'] ?? NULL;
  if ($node instanceof Node) {
    $variables['#attached']['library'][] = 'parc_core/ajax_links';
  }

}

/**
 * Implements template_preprocess_menu().
 */
function parc_core_preprocess_menu(&$variables) {
  // Hide links to news/events terms if there are no nodes
  // tagged with them.
  if ($variables['menu_name'] == 'main') {
    // The links need to appear again if a tag is added to a node.
    $variables['#cache']['tags'][] = 'node_list';
    $items = &$variables['items'];
    _parc_core_preprocess_menu_alter_category_links($items);
  }

  $items = $variables['items'];
  foreach ($items as $item) {
    /** @var \Drupal\Core\Menu\MenuLinkInterface $menu_link */
    $menu_link = $item['original_link'] ?? NULL;
    if (!empty($menu_link)) {
      $options = ($menu_link instanceof MenuLinkContentInterface) ?
        $menu_link->link->first()->options : $menu_link->getOptions();
      if (!empty($options['attributes']['data-enable-ajax']) &&
        $options['attributes']['data-enable-ajax'] == 'true') {
        if ('entity.node.canonical' == $menu_link->getRouteName()) {
          $params = $menu_link->getRouteParameters();
          $nid = $params['node'];
        }
        // Set ajax link attributes.
        $attributes = [
          'class' => 'ajax-link',
          'data-ajax-link-after-execution' => 'false',
          'data-ajax-link-selector' => '.node--basic-page--compact',
          'data-ajax-link-history' => 1,
          'nid' => $nid ?? NULL,
        ] + $options['attributes'];
        $item['url']->setOption('attributes', $attributes);
      }
    }
  }
}

/**
 * Recursive function used to hide links to category terms.
 *
 * @see parc_core_preprocess_menu().
 */
function _parc_core_preprocess_menu_alter_category_links(array &$items) {
  if (empty($items)) {
    return;
  }

  $entity_type_manager = \Drupal::entityTypeManager();
  $node_storage = $entity_type_manager->getStorage('node');
  foreach ($items as $key => &$item) {
    if (!empty($item['below'])) {
      _parc_core_preprocess_menu_alter_category_links($item['below']);
    }

    if (!$item['original_link'] instanceof TaxonomyMenuMenuLink) {
      continue;
    }

    /** @var \Drupal\Core\Url $url */
    $url = $item['url'];
    if ($url->getRouteName() != 'entity.taxonomy_term.canonical') {
      continue;
    }

    $term = $url->getRouteParameters()['taxonomy_term'];
    $term = $entity_type_manager->getStorage('taxonomy_term')->load($term);

    if ($term->bundle() == 'events_category') {
      $results = $node_storage->getQuery()
        ->condition('field_categories', $term->id())
        ->accessCheck()
        ->execute();
      if (empty($results)) {
        unset($items[$key]);
      }
    }
    elseif ($term->bundle() == 'news_category') {
      $results = $node_storage->getQuery()
        ->condition('field_tags', $term->id())
        ->accessCheck()
        ->execute();
      if (empty($results)) {
        unset($items[$key]);
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function parc_core_views_pre_render(ViewExecutable $view) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(ParcCoreViews::class)
    ->viewsPreRender($view);
}

/**
 * Change the title of the "Company" field to "Institution".
 */
function parc_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['node_events_edit_form', 'node_events_form'])) {
    $form['#attached']['library'][] = 'parc_core/edit_node_event';
  }
}

  /**
   * Implement hook_metatags_attachments_alter().
   * @param $attachements
   *
   * @return void
   */
  function parc_core_metatags_attachments_alter($attachements) {

  }

  /**
   * Implement hook_metatags_alter().
   * @param array $metatags
   * @param array $context
   *
   * @return void
   */
  function parc_core_metatags_alter(array &$metatags, array &$context) {

    $currentRouteMatchService = \Drupal::service('current_route_match');
    $routeName = $currentRouteMatchService->getRouteName();
    if ($routeName == 'view.publications.page_publications') {
      $pathCurrentService = \Drupal::service('path.current');
      $current_path = $pathCurrentService->getPath();
      $request = \Drupal::request();
      $queryParameters = $request->query->all();
      if ($current_path == '/scientific-publications') {
        if ($metatags) {
          if ($queryParameters['publication-anchor']) {
            $nid = $queryParameters['publication-anchor'];
            $node = Node::load($nid);
            $image_full_url = '';
            $body = '';
            $title = '';
            $site_name = \Drupal::config('system.site')->get('name');
            $base_url = \Drupal::request()->getSchemeAndHttpHost();
            if ($node) {
              if ($node->hasField('field_cover') && !$node->get('field_cover')->isEmpty())
              $image_media = $node->field_cover->entity;
              if ($image_media) {
                $fid = $image_media->getSource()->getSourceFieldValue($image_media);
                $file = File::load($fid);
                if ($file) {
                  $uri = $file->getFileUri();
                  $url = \Drupal::service('file_url_generator')->generateString($uri);
                  $image_full_url = $base_url . $url;
                }
              } else {
                $image_full_url = $base_url . '/themes/custom/parc/img/sp-default.png';
              }
              $title = $node->getTitle();
              if ($node->hasField('body') && !empty($node->get('body')->getValue())) {
                $body = $node->body->getValue()[0]['value'];
              }
              $full_node_share_url = $base_url . $current_path . '?publication-anchor=' . $nid . '#publication-anchor-' . $nid;
              foreach ($metatags as $key => $attachement) {
                switch ($key) {
                  case 'canonical_url':
                  case 'og_url':
                  case 'twitter_cards_page_url':
                    $metatags[$key] = $full_node_share_url;
                    break;
                  case 'title':
                  case 'og_title':
                  case 'twitter_cards_title':
                    $metatags[$key] = $title . ' | ' . $site_name;
                    break;
                  case 'description':
                  case 'og_description':
                    $metatags[$key] = substr($body, 0, strpos($body, ' ', 196)) . ' ...';
                    break;
                  case 'og_image':
                  case 'og_image_url':
                  case 'twitter_cards_image':
                    $metatags[$key] = $image_full_url;
                    break;
                }
              }
            }
          }
        }
      }
    }
  }

/**
 * Implements hook_page_attachments().
 */
function parc_core_page_attachments(array &$attachments) {
  // Add custom CSS to admin pages.
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    $attachments['#attached']['library'][] = 'parc_core/admin';
  }
}

/**
 * Implements hook_views_query_alter().
 */
function parc_core_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  // Views queries with GROUP BY date are bugged
  // and do not interpret NOW as the current date.
  // Replace 'now' string in queries with time().
  if ($view->id() == 'content_events') {
    foreach ($query->having as &$group) {
      foreach ($group['conditions'] as &$condition) {
        foreach ($condition['value'] as &$value) {
          if ($value == 'now') {
            $value = time();
            return;
          }
        }
      }
    }
  }

  // Remove duplicates from this view by grouping by nid.
  if ($view->id() == 'news_events') {
    $query->addField('', 'nid', '', ['function' => 'groupby']);
    $query->addGroupBy('nid');
  }
}

/**
 * Implements hook_block_alter().
 */
function parc_core_block_alter(&$definitions) {
  $definitions['views_block:search-block_1']['class'] = 'Drupal\parc_core\Plugin\Block\ParcSearchResultsBlock';
}

function parc_core_preprocess_views_view__search(&$variables) {
  $variables['cache']['contexts'][] = 'url';
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  $options = $view->getDisplay()->options;
  $bundles = $options['bundles'];

  if ($bundles == 'all') {
    return;
  }

  $route_match = \Drupal::routeMatch();
  $full_page_link = Url::fromRoute($route_match->getRouteName(), $route_match->getRawParameters()->all(), [
    'query' => [
      'full_results' => TRUE,
      'type' => $bundles,
    ],
  ]);
  $variables['footer']['link'] = [
    '#type' => 'link',
    '#url' => $full_page_link,
    '#title' => t('All results in @title', [
      '@title' => $options['view_title'],
    ]),
  ];

  $query = \Drupal::request()->query->all();
  if ($bundles == 'all') {
    $variables['rows'] = [];
  }
  if (!empty($query['full_results']) && $bundles != 'all') {
    unset($query['full_results']);
    unset($query['type']);
    $back_url = Url::fromRoute($route_match->getRouteName(), $route_match->getRawParameters()->all(), ['query' => $query]);
    $variables['back_url'] = [
      '#type' => 'link',
      '#url' => $back_url,
      '#title' => t('Back to full results'),
    ];
  }
}

/**
 * Implements hook_views_pre_view().
 */
function parc_core_views_pre_view(ViewExecutable $view) {
  $full_results = !empty(\Drupal::request()->query->get('full_results'));

  if ($view->id() == 'search' && $full_results) {
    $pager_options = $view->display_handler->getOption('pager');
    $pager_options['type'] = 'infinite_scroll';
    $pager_options['options']['views_infinite_scroll']['automatically_load_content'] = TRUE;
    $view->display_handler->setOption('pager', $pager_options);
  }
}

/**
 * Implements hook_search_api_autocomplete_suggestions_alter().
 */
function parc_core_search_api_autocomplete_suggestions_alter(array &$suggestions, array $alter_params) {
  if (empty($suggestions)) {
    return;
  }

  $types = [];
  $content_types = \Drupal::entityTypeManager()->getStorage('node_type')->loadMultiple();
  foreach ($content_types as $content_type) {
    $types[$content_type->id()] = $content_type->label();
  }
  foreach ($suggestions as $suggestion) {
    /** @var \Drupal\search_api_autocomplete\Suggestion\Suggestion $suggestion */
    if ($suggestion->getUrl()->getRouteName() != 'entity.node.canonical') {
      continue;
    }

    $node = $suggestion->getUrl()->getRouteParameters()['node'];
    $node = Node::load($node);
    $suggestion->setRender([
      '#type' => 'inline_template',
      '#template' => '{{ text }} <span class="bundle">in {{ bundle }}</span>',
      '#context' => [
        // First 6 words.
        'text' => $suggestion->getLabel(),
        'bundle' => $types[$node->bundle()],
      ],
    ]);
  }
}
