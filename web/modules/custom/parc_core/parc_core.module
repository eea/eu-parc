<?php

/**
 * @file
 * Contains hooks and custom functions for Parc Core module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\node\Entity\Node;
use Drupal\menu_link_content\MenuLinkContentInterface;
use Drupal\parc_core\ParcCoreViews;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\taxonomy_menu\Plugin\Menu\TaxonomyMenuMenuLink;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\taxonomy\TermInterface;
use Drupal\parc_core\ParcEventsManager;

/**
 * Implements hook_theme().
 */
function parc_core_theme() {
  return [
    'parc_event_calendar' => [
      'variables' => ['entries' => []],
    ],
    'parc_lab_matrix' => [
      'variables' => [
        'substances' => [],
        'show_qualified_in_parc' => FALSE,
      ],
    ],
    'parc_projects' => [
      'variables' => [
        'projects' => [],
        'topics' => [],
        'keywords' => [],
      ],
    ],
    'parc_project_title' => [
      'variables' => [
        'topics' => [],
        'keywords' => [],
        'title' => '',
      ],
    ],
    'parc_slideshow' => [
      'variables' => [
        'items' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_page().
 */
function parc_core_preprocess_page(&$variables) {
  $node = $variables['node'] ?? NULL;
  if ($node instanceof Node) {
    $variables['#attached']['library'][] = 'parc_core/ajax_links';
  }

}

/**
 * Implements template_preprocess_menu().
 */
function parc_core_preprocess_menu(&$variables) {
  // Hide links to news/events terms if there are no nodes
  // tagged with them.
  if ($variables['menu_name'] == 'main') {
    // The links need to appear again if a tag is added to a node.
    $variables['#cache']['tags'][] = 'node_list';
    $items = &$variables['items'];
    _parc_core_preprocess_menu_alter_category_links($items);
  }

  $items = $variables['items'];
  foreach ($items as $item) {
    /** @var \Drupal\Core\Menu\MenuLinkInterface $menu_link */
    $menu_link = $item['original_link'] ?? NULL;
    if (!empty($menu_link)) {
      $options = ($menu_link instanceof MenuLinkContentInterface) ?
        $menu_link->link->first()->options : $menu_link->getOptions();
      if (!empty($options['attributes']['data-enable-ajax']) &&
        $options['attributes']['data-enable-ajax'] == 'true') {
        if ('entity.node.canonical' == $menu_link->getRouteName()) {
          $params = $menu_link->getRouteParameters();
          $nid = $params['node'];
        }
        // Set ajax link attributes.
        $attributes = [
          'class' => 'ajax-link',
          'data-ajax-link-after-execution' => 'false',
          'data-ajax-link-selector' => '.node--basic-page--compact',
          'data-ajax-link-history' => 1,
          'nid' => $nid ?? NULL,
        ] + $options['attributes'];
        $item['url']->setOption('attributes', $attributes);
      }
    }
  }
}

/**
 * Recursive function used to hide links to category terms.
 *
 * @see parc_core_preprocess_menu().
 */
function _parc_core_preprocess_menu_alter_category_links(array &$items) {
  if (empty($items)) {
    return;
  }

  $entity_type_manager = \Drupal::entityTypeManager();
  $node_storage = $entity_type_manager->getStorage('node');
  foreach ($items as $key => &$item) {
    if (!empty($item['below'])) {
      _parc_core_preprocess_menu_alter_category_links($item['below']);
    }

    // If the item only has 1 child with no link, remove it.
    if (count($item['below']) == 1) {
      $link = reset($item['below']);
      /** @var \Drupal\Core\Url $url */
      $url = $link['url'];
      if ($url->getRouteName() == '<nolink>') {
        unset($item['below']);
      }
    }

    if (!$item['original_link'] instanceof TaxonomyMenuMenuLink) {
      continue;
    }

    /** @var \Drupal\Core\Url $url */
    $url = $item['url'];
    if ($url->getRouteName() != 'entity.taxonomy_term.canonical') {
      continue;
    }

    $term = $url->getRouteParameters()['taxonomy_term'];
    $term = $entity_type_manager->getStorage('taxonomy_term')->load($term);

    if ($term->bundle() == 'events_category') {
      $results = $node_storage->getQuery()
        ->condition('field_categories', $term->id())
        ->condition('status', 1)
        ->accessCheck()
        ->execute();
      if (empty($results)) {
        unset($items[$key]);
      }
    }
    elseif ($term->bundle() == 'news_category') {
      $results = $node_storage->getQuery()
        ->accessCheck()
        ->condition('field_tags', $term->id())
        ->condition('status', 1)
        ->execute();
      if (empty($results)) {
        unset($items[$key]);
      }
    }
    elseif ($term->bundle() == 'training_types') {
      $results = $node_storage->getQuery()
        ->accessCheck()
        ->condition('field_training_type', $term->id())
        ->condition('status', 1)
        ->execute();
      if (empty($results)) {
        unset($items[$key]);
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function parc_core_views_pre_render(ViewExecutable $view) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(ParcCoreViews::class)
    ->viewsPreRender($view);
}

/**
 * Change the title of the "Company" field to "Institution".
 */
function parc_core_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (in_array($form_id, ['node_events_edit_form', 'node_events_form'])) {
    $form['#attached']['library'][] = 'parc_core/edit_node_event';
  }
}

/**
 * Implement hook_metatags_attachments_alter().
 * @param $attachements
 *
 * @return void
 */
function parc_core_metatags_attachments_alter($attachements) {

}

/**
 * Implement hook_metatags_alter().
 * @param array $metatags
 * @param array $context
 *
 * @return void
 */
function parc_core_metatags_alter(array &$metatags, array &$context) {
  $entity = $context['entity'] ?? NULL;
  if ($entity instanceof NodeInterface
    && $entity->bundle() == 'events') {
    $request_color = \Drupal::request()->query->get('color');
    if (!empty($request_color)) {
      $request_color = urlencode($request_color);

      $image_tags = [
        'og_image',
        'og_image_url',
        'twitter_cards_image',
      ];

      foreach ($image_tags as $image_tag) {
        if (empty($metatags[$image_tag])) {
          continue;
        }

        $metatags[$image_tag] .= "?color=$request_color";
      }
    }
  }

  $currentRouteMatchService = \Drupal::service('current_route_match');
  $routeName = $currentRouteMatchService->getRouteName();
  if ($routeName == 'view.publications.page_publications') {
    $pathCurrentService = \Drupal::service('path.current');
    $current_path = $pathCurrentService->getPath();
    $request = \Drupal::request();
    $queryParameters = $request->query->all();
    if ($current_path == '/scientific-publications') {
      if ($metatags) {
        if (!empty($queryParameters['publication-anchor'])) {
          $nid = $queryParameters['publication-anchor'];
          $node = Node::load($nid);
          $image_full_url = '';
          $body = '';
          $title = '';
          $site_name = \Drupal::config('system.site')->get('name');
          $base_url = \Drupal::request()->getSchemeAndHttpHost();
          if ($node) {
            if ($node->hasField('field_cover') && !$node->get('field_cover')->isEmpty())
            $image_media = $node->field_cover->entity;
            if ($image_media) {
              $fid = $image_media->getSource()->getSourceFieldValue($image_media);
              $file = File::load($fid);
              if ($file) {
                $uri = $file->getFileUri();
                $url = \Drupal::service('file_url_generator')->generateString($uri);
                $image_full_url = $base_url . $url;
              }
            } else {
              $image_full_url = $base_url . '/themes/custom/parc/img/sp-default.png';
            }
            $title = $node->getTitle();
            if ($node->hasField('body') && !empty($node->get('body')->getValue())) {
              $body = $node->body->getValue()[0]['value'];
            }
            $full_node_share_url = $base_url . $current_path . '?publication-anchor=' . $nid . '#publication-anchor-' . $nid;
            foreach ($metatags as $key => $attachement) {
              switch ($key) {
                case 'canonical_url':
                case 'og_url':
                case 'twitter_cards_page_url':
                  $metatags[$key] = $full_node_share_url;
                  break;
                case 'title':
                case 'og_title':
                case 'twitter_cards_title':
                  $metatags[$key] = $title . ' | ' . $site_name;
                  break;
                case 'description':
                case 'og_description':
                  $metatags[$key] = substr($body, 0, strpos($body, ' ', 196)) . ' ...';
                  break;
                case 'og_image':
                case 'og_image_url':
                case 'twitter_cards_image':
                  $metatags[$key] = $image_full_url;
                  break;
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function parc_core_page_attachments(array &$attachments) {
  // Add custom CSS to admin pages.
  if (\Drupal::service('router.admin_context')->isAdminRoute()) {
    $attachments['#attached']['library'][] = 'parc_core/admin';
  }
}

/**
 * Implements hook_views_query_alter().
 */
function parc_core_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() == 'content_events') {
    // For training events, this view should only display events
    // of different training types, while the related_training_types
    // display should display the rest.
    /** @var \Drupal\parc_core\ParcEventsManager $events_manager */
    $events_manager = \Drupal::service('parc_core.events_manager');
    if ($view->current_display == 'block_related_events') {
      $node = \Drupal::routeMatch()->getParameter('node');
      if ($events_manager->isTrainingEventPage()
        && $node->hasField('field_training_type')
        && !$node->get('field_training_type')->isEmpty()
      ) {
        $training_types = array_column($node->get('field_training_type')->getValue(), 'target_id');
        if (!empty($training_types)) {
          $query->addWhere('training_type', 'node__field_training_type.field_training_type_target_id', $training_types, 'NOT IN');
        }
      }
    }

    // Views queries with GROUP BY date are bugged
    // and do not interpret NOW as the current date.
    // Replace 'now' string in queries with time().
    foreach ($query->having as &$group) {
      foreach ($group['conditions'] as &$condition) {
        foreach ($condition['value'] as &$value) {
          if ($value == 'now') {
            $value = time();
            return;
          }
        }
      }
    }
  }

  // Remove duplicates from this view by grouping by nid.
  if ($view->id() == 'news_events') {
    $query->addField('', 'nid', '', ['function' => 'groupby']);
    $query->addGroupBy('nid');
  }
}

/**
 * Implements hook_preprocess_HOOK() for views_view__content_events__page_events.
 */
function parc_core_preprocess_views_view__content_events__page_events(&$variables) {
  /** @var \Drupal\parc_core\ParcEventsManager $events_manager */
  $events_manager = \Drupal::service('parc_core.events_manager');
  if ($events_manager->isTrainingEventsViewPage()) {
    $variables['training_event'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_HOOK() for views_view__search.
 */
function parc_core_preprocess_views_view__search(&$variables) {
  // The view block needs to cache differently depending on query parameters.
  $variables['cache']['contexts'][] = 'url';
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  $bundles = $view->args[0] ?? 'all';

  if ($bundles == 'all') {
    $variables['rows'] = [];
    return;
  }

  if (!empty($variables['empty'])) {
    unset($variables['empty']);
    return;
  }

  /** @var \Drupal\parc_core\ParcSearchManager $search_manager */
  $search_manager = \Drupal::service('parc_core.search_manager');

  $route_match = \Drupal::routeMatch();
  $full_page_link = $search_manager->getFullSearchLinkForBundle($bundles);

  $variables['header']['result_count'] = [
    '#type' => 'inline_template',
    '#template' => '<div class="subview-results">{{ result_count }}</div>',
    '#context' => [
      'result_count' => \Drupal::translation()->formatPlural(
        $view->total_rows,
        '1 result',
        '@count results'
      ),
    ],
  ];

  $variables['header']['title'] = [
    '#type' => 'inline_template',
    '#template' => '<div class="subview-title">{{ title }}</div>',
    '#context' => [
      'title' => $search_manager->getContentTypeAutocompleteLabel($bundles),
    ],
  ];

  if (!$search_manager->isFullResultsPage()) {
    if ($view->total_rows > 4) {
      $variables['footer']['link'] = [
        '#type' => 'link',
        '#url' => $full_page_link,
        '#title' => t('All results in @title', [
          '@title' => $search_manager->getContentTypeAutocompleteLabel($bundles),
        ]),
      ];
    }
  }
  else {
    $query = \Drupal::request()->query->all();
    unset($query['full_results']);
    unset($query['type']);
    $back_url = Url::fromRoute($route_match->getRouteName(), $route_match->getRawParameters()->all(), ['query' => $query]);
    $variables['back_url'] = [
      '#type' => 'link',
      '#url' => $back_url,
      '#title' => t('Back to full results'),
    ];
  }
}

/**
 * Implements hook_views_pre_view().
 */
function parc_core_views_pre_view(ViewExecutable $view) {
  if ($view->id() == 'search') {
    /** @var \Drupal\parc_core\ParcSearchManager $search_manager */
    $search_manager = \Drupal::service('parc_core.search_manager');

    $pager_options = $view->display_handler->getOption('pager');
    if ($search_manager->isFullResultsPage()) {
      $pager_options['type'] = 'infinite_scroll';
      $pager_options['options']['views_infinite_scroll']['automatically_load_content'] = TRUE;
      $view->display_handler->setOption('pager', $pager_options);
    }
    else {
      $pager_options['options']['items_per_page'] = 4;
      $view->display_handler->setOption('pager', $pager_options);
    }
  }
}

/**
 * Implements hook_search_api_autocomplete_suggestions_alter().
 */
function parc_core_search_api_autocomplete_suggestions_alter(array &$suggestions, array $alter_params) {
  if (empty($suggestions)) {
    return;
  }

  /** @var \Drupal\parc_core\ParcSearchManager $search_manager */
  $search_manager = \Drupal::service('parc_core.search_manager');

  foreach ($suggestions as $suggestion) {
    /** @var \Drupal\search_api_autocomplete\Suggestion\Suggestion $suggestion */
    if ($suggestion->getUrl()->getRouteName() != 'entity.node.canonical') {
      continue;
    }

    $node = $suggestion->getUrl()->getRouteParameters()['node'];
    $node = Node::load($node);
    $suggestion->setUrl($search_manager->getNodeAutocompleteUrl($node));
    $suggestion->setRender([
      '#type' => 'inline_template',
      '#template' => '{{ text }} <span class="bundle">{{ "in" | t }} {{ bundle }}</span>',
      '#context' => [
        // First 6 words.
        'text' => $suggestion->getLabel(),
        'bundle' => $search_manager->getContentTypeAutocompleteLabel($node->bundle()),
      ],
    ]);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for views_exposed_form.
 */
function parc_core_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state) {
  if ($form['#id'] == 'views-exposed-form-search-block-1') {
    $form['#action'] = '/search';
    // Change the ID to disable AJAX for this search form.
    $form['#id'] = 'views-form-search-block-1';
  }

  // For the events view, the filter should only display used event categories.
  // We cannot use the BEF plugin for this because on the same page there are
  // actually 2 views - upcoming and past events.
  if ($form['#id'] == 'views-exposed-form-content-events-page-events') {
    if (!empty($form['category'])) {
      $used_categories = \Drupal::database()
        ->select('node__field_categories', 'f')
        ->fields('f', ['field_categories_target_id'])
        ->condition('f.bundle', 'events')
        ->distinct()
        ->execute()
        ->fetchCol();

      $form['category']['#options'] = array_filter($form['category']['#options'], function ($value, $key) use ($used_categories) {
        return in_array($key, $used_categories);
      }, ARRAY_FILTER_USE_BOTH);
    }

    if (!empty($form['training_topic'])) {
      $used_categories = \Drupal::database()
        ->select('node__field_training_type', 'f')
        ->fields('f', ['field_training_type_target_id'])
        ->condition('f.bundle', 'events')
        ->distinct()
        ->execute()
        ->fetchCol();

      $form['training_topic']['#options'] = array_filter($form['training_topic']['#options'], function ($value, $key) use ($used_categories) {
        return in_array($key, $used_categories);
      }, ARRAY_FILTER_USE_BOTH);

      if (empty($form['training_topic']['#options'])) {
        $form['training_topic_collapsible']['#access'] = FALSE;
        $form['organizer_collapsible']['#access'] = FALSE;
      }

      /** @var \Drupal\parc_core\ParcEventsManager $events_manager */
      $events_manager = \Drupal::service('parc_core.events_manager');
      if (!$events_manager->shouldDisplayTrainingTopicFilter()) {
        $form['training_topic_collapsible']['#access'] = FALSE;
        $form['organizer_collapsible']['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for search_teaser.
 */
function parc_core_preprocess_node__search_teaser(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  /** @var \Drupal\parc_core\ParcSearchManager $search_manager */
  $search_manager = \Drupal::service('parc_core.search_manager');
  $variables['url'] = $search_manager->getNodeSearchTeaserUrl($node)->toString();

  $variables['url_target'] = '_self';
  if ($node->bundle() == 'deliverables') {
    $variables['url_target'] = '_blank';
  }
}

/**
 * Implements hook_preprocess_HOOK() for search_teaser.
 */
function parc_core_preprocess_node__events__full(&$variables) {
  /** @var \Drupal\parc_core\ParcEventsManager $events_manager */
  $events_manager = \Drupal::service('parc_core.events_manager');
  if ($events_manager->isTrainingEventPage()) {
    $variables['training_event'] = TRUE;
  }
}

/**
 * Implements hook_node_presave().
 */
function parc_core_node_presave(NodeInterface $node) {
  switch ($node->bundle()) {
    case 'laboratory':
      if (!$node->get('field_substances_matrix')->isEmpty()) {
        $substance_groups = [];
        $sampling_types = [];

        foreach ($node->get('field_substances_matrix')->referencedEntities() as $paragraph) {

          if (!$paragraph instanceof ParagraphInterface) {
            continue;
          }

          $substance_groups[] = $paragraph->get('field_substance_group')->target_id;
          $sampling_types[] = $paragraph->get('field_sampling_type')->target_id;
        }

        $substance_groups = array_unique($substance_groups);
        $sampling_types = array_unique($sampling_types);

        $node->set('field_substance_group', $substance_groups);
        $node->set('field_sampling_type', $sampling_types);
      }

      break;
  }
}

/**
 * Implements hook_field_widget_complete_WIDGET_TYPE_form_alter() for tablefield.
 */
function parc_core_field_widget_complete_tablefield_form_alter(array &$field_widget_complete_form, FormStateInterface $form_state, $context) {
  $field_widget_complete_form['widget'][0]['caption']['#access'] = FALSE;
  $field_widget_complete_form['widget'][0]['#description'] = NULL;
}
