{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 */
#}
{{ attach_library('parc/n--search-teaser') }}

{%
  set classes = [
    'node',
    'node--search-teaser',
    'node--' ~ node.bundle|clean_class,
    view_mode ? 'node--' ~ node.bundle|clean_class ~ '--' ~ view_mode|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
  ]
%}

<article{{attributes.addClass(classes)}}>
  <a href="{{ url }}" target="{{ url_target | default('_self') }}">
    <div{{content_attributes.addClass('node__content')}}>
      <div class="image">
        {% if node.bundle == 'deliverables' %}
          <svg width="32" height="40" viewBox="0 0 32 40" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M7.95 31.5H24.05V28.5H7.95V31.5ZM7.95 23H24.05V20H7.95V23ZM3 40C2.2 40 1.5 39.7 0.9 39.1C0.3 38.5 0 37.8 0 37V3C0 2.2 0.3 1.5 0.9 0.9C1.5 0.3 2.2 0 3 0H21.05L32 10.95V37C32 37.8 31.7 38.5 31.1 39.1C30.5 39.7 29.8 40 29 40H3ZM19.55 12.3V3H3V37H29V12.3H19.55Z" fill="black"/>
          </svg>
        {% else %}
          {{ content[image_field] }}
        {% endif %}
      </div>
      <div class="text">
        {% if node.bundle == 'thematic_areas' and not node.field_categories.isEmpty %}
          <div class="thematic-area">
            {% for item in node.field_categories %}
              {% set color = '#fff' %}
              {% if item.entity.field_color.color %}
                {% set color = item.entity.field_color.color %}
              {% endif %}
              <span style="color: {{ color }}">{{ item.entity.label }}:</span>
            {% endfor %}
          </div>
        {% endif %}
        <div class="title">
          {{ label }}
          {% if node.bundle == 'deliverables' %}
            <svg width="8" height="6" viewBox="10 -8 8 30" fill=" none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0.849609 11.1204H10.8496H0.849609ZM9.31115 5.3113L5.84961 8.38671L9.31115 5.3113ZM5.84961 8.38671L2.38807 5.3113L5.84961 8.38671ZM5.84961 8.38671C5.84961 8.38671 5.84961 5.76692 5.84961 0.527344V8.38671Z" fill="black"></path>
              <path d="M0.849609 11.1204H10.8496M9.31115 5.3113L5.84961 8.38671M5.84961 8.38671L2.38807 5.3113M5.84961 8.38671C5.84961 8.38671 5.84961 5.76692 5.84961 0.527344" stroke="#000" stroke-width="1"></path>
            </svg>
          {% endif %}
        </div>
        {{ content|without(image_field) }}
      </div>
    </div>
  </a>
</article>
