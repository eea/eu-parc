<?php

/**
 * @file
 * Parc theme file.
 */

use Drupal\block\Entity\Block;
use Drupal\taxonomy\Entity\Term;
use Drupal\parc\ParcThemeProcess;
use Drupal\taxonomy\TermInterface;
use Drupal\facets\FacetInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Render\Markup;
use Drupal\views\ViewExecutable;
use Drupal\block_content\Entity\BlockContent;
use Drupal\media\MediaInterface;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme_suggestions_alter().
 */
function parc_theme_suggestions_alter(
  array &$suggestions,
  array $variables,
  $hook
  ) {
  switch ($hook) {
    case 'block':
      if (!empty($variables['elements']['#id'])) {
        $block = Block::load($variables['elements']['#id']);
        if (!empty($block) && !empty($block->getRegion())) {
          array_splice($suggestions, 2, 0, $hook . '__region__' . $block->getRegion());
        }
      }

      if (isset($variables['elements']['content']['#block_content'])) {
        $bundle = $variables['elements']['content']['#block_content']->bundle();
        array_splice($suggestions, 3, 0, $hook . '__block_content__' . $bundle);
      }
      break;

    case 'field':
      $element = $variables['element'];
      $suggestions[] = $hook . '__' . $element['#entity_type'] . '__' . $element['#field_name'] . '__' . $element['#bundle'] . '__' . $element['#view_mode'];
      break;

    case 'taxonomy_term':
      $term = $variables['elements']['#taxonomy_term'];
      $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
      array_splice($suggestions, 0, 0, $hook . '__' . $sanitized_view_mode);
      array_splice($suggestions, 2, 0, $hook . '__' . $term->bundle() . '__' . $sanitized_view_mode);
      break;

    case 'paragraph':
      $paragraph = $variables['elements']['#paragraph'];
      $parent = $paragraph->getParentEntity();
      if ($parent) {
        array_splice($suggestions, 1, 0, 'paragraph__' . $parent->bundle() . '__' . $paragraph->bundle());
        array_splice($suggestions, 2, 0, 'paragraph__' . $parent->bundle() . '__' . $variables['elements']['#view_mode']);
        $suggestions[] = 'paragraph__' . $parent->bundle() . '__' . $paragraph->bundle() . '__' . $variables['elements']['#view_mode'];
      }
      break;

    case 'page':
      if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
        $term = Term::load($tid);
        array_splice($suggestions, 1, 0, $hook . '__taxonomy__' . $term->bundle());
      }

      if ($node = \Drupal::request()->attributes->get('node')) {
        array_splice($suggestions, 1, 0, $hook . '__node__' . $node->getType());
      }
      break;

    case 'form':
      $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);
      break;

    default:
      break;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function parc_preprocess_node(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  if ($variables['view_mode'] == 'teaser' && $node->bundle() == 'article') {
    $variables['body_full'] = $node->body->view('default');
  }
  if ($variables['view_mode'] == 'teaser' && $node->bundle() == 'publications') {
    // $node = $variables['node'];
    // $node->get('field_journal')->getString();
    // $variables['elements']['field_journal']['0']['#context']['value'] = "just";
    // dump($variables['elements']['field_journal']['0']['#context']['value']);
    // dump($node);
  }
  if ($variables['view_mode'] == 'teaser' && $node->bundle() == 'events') {
    $variables['#cache']['max-age'] = 0;

    $color = '#8631A7';
    if (!empty($node->overlay)) {
      $color = $node->overlay;
    }
    $variables['url'] = $node->toUrl('canonical', [
      'query' => [
        'color' => $color,
      ],
    ])->toString();
  }

  if ($variables['view_mode'] == 'full' && $node->bundle() == 'events') {
    $variables['#cache']['contexts'][] = 'url:query_args:color';

    $color = \Drupal::request()->query->get('color');
    if (empty($color) || !preg_match('/^#[a-f0-9]{6}$/i', $color)) {
      $color = '#8631A7';
      $category = $node->get('field_categories')->entity;
      if ($category instanceof TermInterface) {
        $color = $category->get('field_colors')->color;
      }
    }

    $variables['color'] = $color;
  }

  if ($variables['view_mode'] == 'teaser' && $node->bundle() == 'institution') {
    $media = $node->get('field_media_image')->entity;
    if ($media instanceof MediaInterface && $media->uuid() == '15f79f08-9928-44f7-a909-8ff476217a2e') {
      $variables['has_placeholder_image'] = TRUE;
    }

    foreach ($node->get('field_institution_roles')->referencedEntities() as $term) {
      /** @var \Drupal\taxonomy\TermInterface $term */
      $color = $term->get('field_color')->color ?? '#000000';
      $variables['roles'][] = [
        '#type' => 'inline_template',
        '#template' => '<div class="role" style="color: {{ color }};">{{ label }}</div>',
        '#context' => [
          'label' => $term->label(),
          'color' => $color,
        ],
      ];
      if (empty($variables['color'])) {
        $variables['color'] = $color;
      }
    }
  }

  if ($variables['view_mode'] == 'teaser' && $node->bundle() == 'laboratory') {
    $lab_type = $node->get('field_lab_type')->entity;
    $color = '#000000';
    if (!empty($lab_type)) {
      /** @var \Drupal\taxonomy\TermInterface $term */
      $color = $lab_type->get('field_color')->color ?? '#000000';
      $variables['roles'][] = [
        '#type' => 'inline_template',
        '#template' => '<div class="role" style="color: {{ color }};">{{ label }}</div>',
        '#context' => [
          'label' => $lab_type->label(),
          'color' => $color,
        ],
      ];
    }
    $variables['color'] = $color;
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function parc_preprocess_block(&$variables) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(ParcThemeProcess::class)
    ->preprocessBlock($variables);
}

/**
 * Implements parc_preprocess_paragraph.
 */
function parc_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  // Get parent entity.
  $parent = $paragraph->getParentEntity();

  if (isset($parent)) {
    $variables['parentID'] = $parent->Id();
  }
}

/**
 * Implements hook_theme().
 */
function parc_theme($existing, $type, $theme, $path) {
  return [
    'views_exposed_form__content_events__page_events' => [
      'render element' => 'form',
    ],
    'views_exposed_form__news_events__page_news' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Helper function to retrieve query args from url string.
 *
 * @param string $url
 *   Given url string.
 * @param string $parameter_name
 *   Searched query argument.
 */
function _parc_get_query_from_url($url , $parameter_name) {
  $parts = parse_url($url);
  if (isset($parts['query'])) {
    parse_str($parts['query'], $query);
    if (isset($query[$parameter_name])) {
      return $query[$parameter_name];
    }
    else {
      return [];
    }
  }
  else {
    return [];
  }
}

/**
 * Implements hook_preprocess_HOOK() for facets_item_list.
 */
function parc_preprocess_facets_item_list(&$variables) {
  /** @var \Drupal\facets\Entity\Facet $facet */
  $facet = $variables['facet'];
  if (!$facet instanceof FacetInterface) {
    return;
  }

  $items = $variables['items'];
  // Remove 'focus' query parameter from facets.
  foreach ($items as $idx => $item) {
    /** @var \Drupal\Core\Url $url */
    $url = $item['value']['#url'] ?? NULL;

    if (!$url instanceof Url) {
      continue;
    }

    $query = $url->getOption('query');

    if (empty($query) || empty($query['focus'])) {
      continue;
    }

    unset($query['focus']);
    $url->setOption('query', $query);
    $items[$idx]['value']['#url'] = $url;
  }

  if ($facet->id() == 'category'
    || $facet->id() == 'lab_type') {
    $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
    foreach ($items as $item) {
      $tid = $item['value']['#title']['#raw_value'];
      $term = $term_storage->load($tid);

      if (!$term instanceof TermInterface) {
        continue;
      }

      if (!$term->hasField('field_color')) {
        continue;
      }

      $color = $term->get('field_color')->color ?? '#000000';
      /** @var \Drupal\Core\Template\Attribute $attributes */
      $attributes = $item['attributes'];
      $attributes->setAttribute('style', "color: $color");

      if ($term->hasField('field_role_type')) {
        if ($term->get('field_role_type')->value == 'main_secondary') {
          $variables['items_main'][] = $item;
        }
        else {
          $variables['items_additional'][] = $item;
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for facets_result_item.
 */
function parc_preprocess_facets_result_item(&$variables) {
  $tid = $variables['raw_value'];
  if (is_numeric($tid)) {
    $term = Term::load($tid);
    if ($term instanceof TermInterface && !empty($term->getDescription())) {
      $variables['tooltip'] = [
        'text' => $term->getDescription(),
        'background' => $term->get('field_color')->color,
      ];
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function parc_preprocess_html(&$variables) {
  // Add node id to the body class.
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface && $node->hasField('field_custom_classes')) {
    $variables['attributes']['class'][] = $node->get('field_custom_classes')->value;
  }
}

/**
 * Implements hook_preprocess_HOOK() for field__media__vector.
 */
function parc_preprocess_field__media__vector(&$variables) {
  // Vector medias are SVGs that contain ID attributes
  // and have animations based on those IDs.
  // If the same SVG is used multiple times in one page,
  // the animation will only work for the first SVG.
  // This code ensures that SVGs will have unique IDs every time they are rendered.
  foreach ($variables['items'] as $idx => $item) {
    if (empty($item['content']['#markup'])) {
      continue;
    }

    $markup = $item['content']['#markup'];
    if (!str_contains($markup, '<animate')) {
      continue;
    }

    // Get all the IDs from the markup.
    preg_match_all('/ id="([^"]+)"/', $markup, $matches);
    if (empty($matches[1])) {
      continue;
    }

    foreach ($matches[1] as $id) {
      $unique_id = uniqid("{$id}_");
      // Replace the HTML ID attribute (e.g. <g id="id1">).
      $markup = str_replace(" id=\"$id\"", " id=\"$unique_id\"", $markup);
      // Replace the ID in the <animate> tags (e.g. <animate begin="id1.mouseenter"">)
      $markup = str_replace("$id.", "$unique_id.", $markup);
    }
    $variables['items'][$idx]['content']['#markup'] = Markup::create($markup);

    // Disable caching so that the media item
    // is rendered differently each time.
    $variables['#cache']['max-age'] = 0;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for node.
 */
function parc_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  // By default, the 'node' theme has suggestions on node--BUNDLE
  // and on node--DISPLAY-MODE, with a higher priority on the bundle one.
  // This hook sets a higher priority on node--search-teaser so that we don't have
  // to create node--BUNDLE--search-teaser for every content type.
  if ($variables['elements']['#view_mode'] == 'search_teaser') {
    $suggestions = [];
    $node = $variables['elements']['#node'];
    $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

    $suggestions[] = 'node__' . $node->bundle();
    $suggestions[] = 'node__' . $sanitized_view_mode;
    $suggestions[] = 'node__' . $node->bundle() . '__' . $sanitized_view_mode;
    $suggestions[] = 'node__' . $node->id();
    $suggestions[] = 'node__' . $node->id() . '__' . $sanitized_view_mode;

    return $suggestions;
  }
}

/**
 * Implements hook_preprocess_HOOK() for search_teaser.
 */
function parc_preprocess_node__search_teaser(&$variables) {
  $image_fields = [
    'article' => 'field_image',
    'thematic_areas' => 'field_categories',
    'publications' => 'field_cover',
    'events' => 'field_media_image',
    'page' => 'field_media_image',
    'basic_page' => 'field_banner',
    'deliverables' => 'field_media',
    'institution' => 'field_media_image',
    'laboratory' => 'field_media_image',
  ];

  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  if (!empty($image_fields[$node->bundle()])) {
    $variables['image_field'] = $image_fields[$node->bundle()];
  }

  if ($node->hasField('field_address_data') && !$node->get('field_address_data')->isEmpty()) {
    $variables['content']['field_address_data'] = [
      '#markup' => $node->get('field_address_data')->value,
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK() for paragraph__newsletter.
 */
function parc_preprocess_paragraph__newsletter(&$variables) {
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['paragraph'];
  $date = $paragraph->get('field_date')->value;

  $block = $paragraph->getParentEntity();
  if ($block instanceof BlockContent
    && $block->hasField('field_show_season')
    && $block->get('field_show_season')->value) {
    $year = date('Y', strtotime($date));
    $spring = "$year-03-01";
    $summer = "$year-06-01";
    $autumn = "$year-09-01";
    $winter = "$year-12-01";

    switch (TRUE) {
      case $date >= $spring && $date < $summer:
        $variables['season'] = t('Spring');
        break;

      case $date >= $summer && $date < $autumn:
        $variables['season'] = t('Summer');
        break;

      case $date >= $autumn && $date < $winter:
        $variables['season'] = t('Autumn');
        break;

      default:
        $variables['season'] = t('Winter');
    }

    $variables['newsletter_date'] = $variables['season'] . ' ' . date('Y', strtotime($date));
    $variables['show_season'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu__sidebar_dropdown.
 */
function parc_preprocess_menu__sidebar_dropdown(&$variables) {
  $variables['unique_id'] = uniqid('menu-');
  $dropdown_title = t('Categories');
  $training_event_menu = FALSE;

  foreach ($variables['items'] as $link) {
    /** @var \Drupal\Core\Url $url */
    $url = $link['url'];
    if ($url->getRouteName() == '<nolink>') {
      if (strpos(strtolower($link['title']), 'events') !== FALSE) {
        $dropdown_title = t('Event type');
        break;
      }
      if (strpos(strtolower($link['title']), 'trainings') !== FALSE) {
        $training_event_menu = TRUE;
        $dropdown_title = t('Training topic');
        break;
      }
    }
  }

  // Only show the trainings submenu if the current page is a training event.
  if ($training_event_menu) {
    $variables['#cache']['contexts'][] = 'url';

    /** @var \Drupal\parc_core\ParcEventsManager $events_manager */
    $events_manager = \Drupal::service('parc_core.events_manager');
    if (!$events_manager->isTrainingEventPage()) {
      $variables['items'] = [];
    }
  }

  $variables['dropdown_title'] = $dropdown_title;
}

/**
 * Implements hook_preprocess_HOOK() for field__block_content__field_paragraphs__newsletter.
 */
function parc_preprocess_field__block_content__field_paragraphs__newsletter(&$variables) {
  $items = $variables['items'];
  $count = 0;
  foreach ($items as $item) {
    if ($count < 6) {
      $variables['first_items'][] = $item;
    }
    else {
      $variables['see_more_items'][] = $item;
    }

    $count++;
  }

  $variables['count'] = count($items);

  /** @var \Drupal\block_content\BlockContentInterface $block */
  $block = $variables['element']['#object'];
  $variables['block_id'] = $block->id();
  $variables['see_more_link_text'] = $block->get('field_link_text')->value ?? t('See all newsletters');
}

/**
 * Implements hook_form_FORM_ID_alter() for views_exposed_form.
 */
function parc_form_views_exposed_form_alter(array &$form, FormStateInterface $form_state) {
  if ($form['#id'] == 'views-exposed-form-content-events-block-1') {
    $form['#attributes']['class'][] = 'd-none';
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function parc_preprocess_views_view(array &$variables) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  $display = $view->getDisplay();

  if ($display->getPluginId() == 'page') {
    $variables['title'] = $view->getTitle();
  }
  $variables['#attached']['library'][] = 'parc/svg_title';
}
