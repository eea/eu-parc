<?php

/**
 * @file
 * Parc theme file.
 */

use Drupal\block\Entity\Block;
use Drupal\taxonomy\Entity\Term;
use Drupal\parc\ParcThemeProcess;
use Drupal\taxonomy\TermInterface;
use Drupal\facets\FacetInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Render\Markup;

/**
 * Implements hook_theme_suggestions_alter().
 */
function parc_theme_suggestions_alter(
  array &$suggestions,
  array $variables,
  $hook
  ) {
  switch ($hook) {
    case 'block':
      if (!empty($variables['elements']['#id'])) {
        $block = Block::load($variables['elements']['#id']);
        if (!empty($block) && !empty($block->getRegion())) {
          array_splice($suggestions, 2, 0, $hook . '__region__' . $block->getRegion());
        }
      }

      if (isset($variables['elements']['content']['#block_content'])) {
        $bundle = $variables['elements']['content']['#block_content']->bundle();
        array_splice($suggestions, 3, 0, $hook . '__block_content__' . $bundle);
      }
      break;

    case 'field':
      $element = $variables['element'];
      $suggestions[] = $hook . '__' . $element['#entity_type'] . '__' . $element['#field_name'] . '__' . $element['#bundle'] . '__' . $element['#view_mode'];
      break;

    case 'taxonomy_term':
      $term = $variables['elements']['#taxonomy_term'];
      $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');
      array_splice($suggestions, 0, 0, $hook . '__' . $sanitized_view_mode);
      array_splice($suggestions, 2, 0, $hook . '__' . $term->bundle() . '__' . $sanitized_view_mode);
      break;

    case 'paragraph':
      $paragraph = $variables['elements']['#paragraph'];
      $parent = $paragraph->getParentEntity();
      if ($parent) {
        array_splice($suggestions, 1, 0, 'paragraph__' . $parent->bundle() . '__' . $paragraph->bundle());
        array_splice($suggestions, 2, 0, 'paragraph__' . $parent->bundle() . '__' . $variables['elements']['#view_mode']);
        $suggestions[] = 'paragraph__' . $parent->bundle() . '__' . $paragraph->bundle() . '__' . $variables['elements']['#view_mode'];
      }
      break;

    case 'page':
      if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical' && $tid = \Drupal::routeMatch()->getRawParameter('taxonomy_term')) {
        $term = Term::load($tid);
        array_splice($suggestions, 1, 0, $hook . '__taxonomy__' . $term->bundle());
      }

      if ($node = \Drupal::request()->attributes->get('node')) {
        array_splice($suggestions, 1, 0, $hook . '__node__' . $node->getType());
      }
      break;

    case 'form':
      $suggestions[] = 'form__' . str_replace('-', '_', $variables['element']['#id']);
      break;

    default:
      break;
  }
}

/**
 * Implements hook_preprocess_node().
 */
function parc_preprocess_node(&$variables) {
  $node = $variables['node'];
  if ($variables['view_mode'] == 'teaser' && $node->bundle() == 'article') {
    $variables['body_full'] = $node->body->view('default');
  }
  if ($variables['view_mode'] == 'teaser' && $node->bundle() == 'publications') {
    // $node = $variables['node'];
    // $node->get('field_journal')->getString();
    // $variables['elements']['field_journal']['0']['#context']['value'] = "just";
    // dump($variables['elements']['field_journal']['0']['#context']['value']);
    // dump($node);
  }
  if ($variables['view_mode'] == 'teaser' && $node->bundle() == 'events') {
    $variables['#cache']['max-age'] = 0;
  }

  if ($variables['view_mode'] == 'teaser' && $node->bundle() == 'institution') {
    foreach ($node->get('field_institution_roles')->referencedEntities() as $term) {
      /** @var \Drupal\taxonomy\TermInterface $term */
      $color = $term->get('field_color')->color ?? '#000000';
      $variables['roles'][] = [
        '#type' => 'inline_template',
        '#template' => '<div class="role" style="color: {{ color }};">{{ label }}</div>',
        '#context' => [
          'label' => $term->label(),
          'color' => $color,
        ],
      ];
      if (empty($variables['color'])) {
        $variables['color'] = $color;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function parc_preprocess_block(&$variables) {
  return \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(ParcThemeProcess::class)
    ->preprocessBlock($variables);
}

/**
 * Implements parc_preprocess_paragraph.
 */
function parc_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];
  // Get parent entity.
  $parent = $paragraph->getParentEntity();

  if (isset($parent)) {
    $variables['parentID'] = $parent->Id();
  }
}

/**
 * Implements hook_theme().
 */
function parc_theme($existing, $type, $theme, $path) {
  return [
    'views_exposed_form__content_events__page_events' => [
      'render element' => 'form',
    ],
    'views_exposed_form__news_events__page_news' => [
      'render element' => 'form',
    ],
  ];
}

/**
 * Implements hook_preprocess_details().
 */
function parc_preprocess_details(&$variables) {
  if (\Drupal::routeMatch()->getRouteName() != 'views.ajax') {
    return;
  }

  $request = \Drupal::request();
  // Getting the referer.
  $referer = $request->headers->get('referer');
  $query_args = $request->query->all();
  if (!empty($query_args['category']) && $referer) {
    $currentCategories = $query_args['category'];
    $refCategory = _parc_get_query_from_url($referer, 'category');
    if (count($currentCategories) !== count($refCategory) && empty($query_args['close'])) {
      $variables['open'] = TRUE;
    }
  }
}

/**
 * Helper function to retrieve query args from url string.
 *
 * @param string $url
 *   Given url string.
 * @param string $parameter_name
 *   Searched query argument.
 */
function _parc_get_query_from_url($url , $parameter_name) {
  $parts = parse_url($url);
  if (isset($parts['query'])) {
    parse_str($parts['query'], $query);
    if (isset($query[$parameter_name])) {
      return $query[$parameter_name];
    }
    else {
      return [];
    }
  }
  else {
    return [];
  }
}

/**
 * Implements hook_preprocess_HOOK() for facets_item_list.
 */
function parc_preprocess_facets_item_list(&$variables) {
  /** @var \Drupal\facets\Entity\Facet $facet */
  $facet = $variables['facet'];
  if (!$facet instanceof FacetInterface) {
    return;
  }
  if ($facet->id() == 'category') {
    $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
    $items = $variables['items'];
    foreach ($items as $item) {
      $tid = $item['value']['#title']['#raw_value'];
      $term = $term_storage->load($tid);

      if (!$term instanceof TermInterface) {
        continue;
      }

      if (!$term->hasField('field_color')) {
        continue;
      }

      $color = $term->get('field_color')->color ?? '#000000';
      /** @var \Drupal\Core\Template\Attribute $attributes */
      $attributes = $item['attributes'];
      $attributes->setAttribute('style', "color: $color");

      if ($term->get('field_role_type')->value == 'main_secondary') {
        $variables['items_main'][] = $item;
      }
      else {
        $variables['items_additional'][] = $item;
      }
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function parc_preprocess_html(&$variables) {
  // Add node id to the body class.
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface && $node->hasField('field_custom_classes')) {
    $variables['attributes']['class'][] = $node->get('field_custom_classes')->value;
  }
}

/**
 * Implements hook_preprocess_HOOK() for field__media__vector.
 */
function parc_preprocess_field__media__vector(&$variables) {
  // Vector medias are SVGs that contain ID attributes
  // and have animations based on those IDs.
  // If the same SVG is used multiple times in one page,
  // the animation will only work for the first SVG.
  // This code ensures that SVGs will have unique IDs every time they are rendered.
  foreach ($variables['items'] as $idx => $item) {
    if (empty($item['content']['#markup'])) {
      continue;
    }

    $markup = $item['content']['#markup'];
    // Get all the IDs from the markup.
    preg_match_all('/id="([^"]+)"/', $markup, $matches);
    if (empty($matches[1])) {
      continue;
    }

    foreach ($matches[1] as $id) {
      $unique_id = uniqid("{$id}_");
      // Replace the HTML ID attribute (e.g. <g id="id1">).
      $markup = str_replace("\"$id\"", "\"$unique_id\"", $markup);
      // Replace the ID in the <animate> tags (e.g. <animate begin="id1.mouseenter"">)
      $markup = str_replace("$id.", "$unique_id.", $markup);
    }
    $variables['items'][$idx]['content']['#markup'] = Markup::create($markup);
  }
}